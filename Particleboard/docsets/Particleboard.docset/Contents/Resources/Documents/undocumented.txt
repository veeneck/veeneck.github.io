CGRect+Extensions.swift
	case Left = 1, Top = 2, Right = 3, Bottom = 4
	case Left = 1, Top = 2, Right = 3, Bottom = 4
	case Left = 1, Top = 2, Right = 3, Bottom = 4
	case Left = 1, Top = 2, Right = 3, Bottom = 4
Graphics.swift
	public enum UIUserInterfaceIdiom : Int
	public class Graphics
Easing.swift
	public func dub(num:Float)->Float
	public func sinFloat(num:Float)->Float
	public func LinearInterpolation(p:Float)->Float
	public func  QuadraticEaseIn(p:Float)->Float
	public func QuadraticEaseOut(p:Float)->Float
	public func QuadraticEaseInOut(p:Float)->Float
	public func CubicEaseIn(p:Float)->Float
	public func CubicEaseOut(p:Float)->Float
	public func CubicEaseInOut(p:Float)->Float
	public func QuarticEaseIn(p:Float)->Float
	public func QuarticEaseOut(p:Float)->Float
	public func QuarticEaseInOut(p:Float)->Float
	public func QuinticEaseIn(p:Float)->Float
	public func QuinticEaseOut(p:Float)->Float
	public func QuinticEaseInOut(p:Float)->Float
	public func SineEaseIn(p:Float)->Float
	public func SineEaseOut(p:Float)->Float
	public func SineEaseInOut(p:Float)->Float
	public func CircularEaseIn(p:Float)->Float
	public func CircularEaseOut(p:Float)->Float
	public func CircularEaseInOut(p:Float)->Float
	public func ExponentialEaseIn(p:Float)->Float
	public func ExponentialEaseOut(p:Float)->Float
	public func ExponentialEaseInOut(p:Float)->Float
	public func ElasticEaseIn(p:Float)->Float
	public func ElasticEaseOut(p:Float)->Float
	public func ElasticEaseInOut(p:Float)->Float
	public func BackEaseIn(p:Float)->Float
	public func BackEaseOut(p:Float)->Float
	public func BackEaseInOut(p:Float)->Float
	public func BounceEaseIn(p:Float)->Float
	public func BounceEaseOut(p:Float)->Float
	public func BounceEaseInOut(p:Float)->Float
ASAttributedLabelNode.swift
	public class ASAttributedLabelNode: SKSpriteNode
float2+Extensions.swift
	init(angle: Float)
ZPosition.swift
	public enum PositionCategory : Float
	public class ZPosition
Time.swift
	public class Time
String+Extensions.swift
	public func replace(target: String, withString: String) -> String
PBMusic.swift
	public func changeVolumeByIncrement(increment:Int)
PBSound.swift
	public var fileName : String
	public var fileType : String
	public var filePrefix : String
	public var count : Int
	public var frequency : Int
	public var volumeModifier : Float
	public var lastPlayed : Int = -1
	public init(filename:String, fileType:String, filePrefix:String, count:Int, frequency:Int, volumeModifier:Float = 0)
	public mutating func updateLastPlayed(newIndex:Int)
	@objc public func audioPlayerDecodeErrorDidOccur(player: AVAudioPlayer, error: NSError?)
