PinchGesture.swift
	class PinchGesture : UIPinchGestureRecognizer
	func handlePinch(recognizer:UIPinchGestureRecognizer, target:SKCameraNode)
	func handlePinchChanged(recognizer:UIPinchGestureRecognizer, target:SKCameraNode)
	func handlePinchEnded(recognizer:UIPinchGestureRecognizer, target:SKCameraNode)
	func updateCameraBounds(target:SKCameraNode)
	func boundScaleToWindow(scale:CGFloat) -> CGFloat
ActionBar.swift
	class ActionBar : GKEntity
	init(parentNode:SKNode)
	func selectSquad(squad:Squad)
	func unselectSquad()
DecisionScene.swift
	class DecisionScene : GameScene
	var subscene : String?
	func loadDecision()
	func exitAction(action:()->(), choice:Decision)
	override class func loadSceneAssetsWithCompletionHandler(handler:()->())
ActionBarRender.swift
	class ActionBarRender : GKComponent, ButtonNodeResponder
	func buttonTouchesBegan(touches: Set<UITouch>, withEvent event: UIEvent?)
	func buttonTouchesEnded(touches: Set<UITouch>, withEvent event: UIEvent?)
	func buttonTouchesCancelled(touches: Set<UITouch>?, withEvent event: UIEvent?)
	func addHighlight(action:String)
	func removeHighlight(action:String)
	func hideIcon(action:String)
	func showIcon(action:String)
Moving.swift
	class MovingState: GKState
	unowned var entity: Squad
	var elapsedTime: NSTimeInterval = 0.0
	required init(entity: Squad)
	override func didEnterWithPreviousState(previousState: GKState?)
	override func updateWithDeltaTime(seconds: NSTimeInterval)
	func handleCommand(command:Command)
	override func isValidNextState(stateClass: AnyClass) -> Bool
	override func willExitWithNextState(nextState: GKState)
Seeking.swift
	unowned var entity: CharacterEntity
	var elapsedTime: NSTimeInterval = 0.0
	required init(entity: CharacterEntity)
	override func didEnterWithPreviousState(previousState: GKState?)
	override func updateWithDeltaTime(seconds: NSTimeInterval)
	func moveTowardsDesiredPosition(desired:CGPoint)
	override func isValidNextState(stateClass: AnyClass) -> Bool
	func determineTarget() -> CharacterEntity?
	override func willExitWithNextState(nextState: GKState)
	func debugSeeking()
PerformanceFlags.swift
	struct WorldPerformance
	struct CombatPerformance
	struct AIPerformance
Idle.swift
	unowned var entity: CharacterEntity
	var elapsedTime: NSTimeInterval = 0.0
	required init(entity: CharacterEntity)
	override func didEnterWithPreviousState(previousState: GKState?)
	override func updateWithDeltaTime(seconds: NSTimeInterval)
	override func isValidNextState(stateClass: AnyClass) -> Bool
GroupIntelligence.swift
	class GroupIntelligenceComponent: GKComponent
	let stateMachine: GKStateMachine
	let initialStateClass: AnyClass
	init(states: [GKState])
	override func updateWithDeltaTime(seconds: NSTimeInterval)
	func enterInitialState()
	func debugSquadState()
BattleReport.swift
	class BattleReport : Slide
	var victory : Bool = false
	init(scene:GameScene, victory:Bool)
	required init?(coder aDecoder: NSCoder)
	override func hide()
	func setDefaults(victory:Bool)
	func continueTapped()
	override func handleButtonPress(name: String, node: SKNode)
Decision.swift
	var hasChoice : Bool = true
	var actionLabel1 : String?
	var actionLabel2 : String?
	var action1 : ()->() = {}
	var action2 : ()->() = {}
	var level : Int
	var identifier : String
	var beforeBattle : Bool
	var meetsCriteria : ()->(Bool)
	class DecisionService
	class func getDecisionForLevel(id:Int) -> Decision?
DialogueSequence.swift
	struct KeyPosition
	var coords : CGPoint
	var alignment : SKLabelHorizontalAlignmentMode
	init(coords:CGPoint, alignment:SKLabelHorizontalAlignmentMode)
	var sequences = Array<ActionSequence>()
	var currentSequence : ActionSequence?
	weak var scene : GameScene?
	init(scene:GameScene)
	func playNextAction(completion:()->())
	func prepForNextAction(completion:()->())
	func touched()
String+Extensions.swift
	func replace(target: String, withString: String) -> String
Action.swift
	class Action : NSObject
	var pending : Bool = false
	var ability : Ability
	var locked : Bool = false
	var cooling : Bool = false
	var override : Bool = false
	var entity : ActionBar
	var squad : Squad
	init(squad:Squad, ability:Ability, entity:ActionBar)
	func playErrorSound()
	func playSuccessSound()
	func lock()
	func unlock()
	func isCoolingDown() -> Bool
	func cool()
	func uncool()
	func addIndicatorOnSquadFocus()
	func addTargetIndicator(target:Squad)
	func removeTargetIndicator(target:Squad)
GameDataAccessor.swift
	class GameDataAccessor
	init()
	class func getCurrentScene() -> String
	class func getCurrentLevel() -> Level?
	class func getLevelById(id:Int) -> Level?
	class func getLevelByCutscene(cutscene:String) -> Level?
	class func getAllLevels() -> Array<Level>?
	class func updateLevel(id:Int, level:Level)
	class func saveFileExists(name:String) -> Bool
	class func deleteSaveFile(name:String)
Modifier.swift
	case Instant = "Instant", Duration = "Duration", DoT = "DoT", Permanent = "Permanent"
	case Instant = "Instant", Duration = "Duration", DoT = "DoT", Permanent = "Permanent"
	case Instant = "Instant", Duration = "Duration", DoT = "DoT", Permanent = "Permanent"
	case Instant = "Instant", Duration = "Duration", DoT = "DoT", Permanent = "Permanent"
	case Permanent = "Permanent", Temporary = "Temporary"
	case Permanent = "Permanent", Temporary = "Temporary"
	case Blunt = 0, Piercing, Slashing, Elemental
	case Blunt = 0, Piercing, Slashing, Elemental
	case Blunt = 0, Piercing, Slashing, Elemental
	case Blunt = 0, Piercing, Slashing, Elemental
GameScene.swift
	protocol GameSceneDelegate
	func sceneDidFinish(nextScene:SceneObject)
	enum WorldLayer : Int
	case World = 0, UI, Debug, PermanentDebug
	case World = 0, UI, Debug, PermanentDebug
	case World = 0, UI, Debug, PermanentDebug
	case World = 0, UI, Debug, PermanentDebug
	class GameScene : SKScene
	var viewDelegate : GameSceneDelegate?
	func addChild(node:SKNode, layer:WorldLayer)
	func clickedOrTapped(location:CGPoint)
	override func touchesBegan(touches: Set<UITouch>, withEvent event: UIEvent?)
	override func touchesMoved(touches: Set<UITouch>, withEvent event: UIEvent?)
	override func touchesEnded(touches: Set<UITouch>, withEvent event: UIEvent?)
	func registerGestures()
	func detectPan(recognizer:UIPanGestureRecognizer)
	func detectPinch(recognizer:UIPinchGestureRecognizer)
	class func loadSceneAssetsWithCompletionHandler(handler:()->())
	class GameScene : SKScene
Battle.swift
	class BattleComponent : GKComponent
	var target : Squad?
	var beingAttackedBy = [Squad]()
	override init()
	func disengage()
	func disengagementNotification(attacker:Squad)
	func pickBestTarget() -> Squad?
LoadGame.swift
	class LoadGame : Slide
	init(scene:GameScene)
	required init?(coder aDecoder: NSCoder)
	override func hide()
	func loadGameTapped(file:String)
	func setResumeIcons()
	func setResumeIcon(file:String)
	func deleteSave(file:String)
	override func handleButtonPress(name: String, node: SKNode)
Persuing.swift
	class PersuingState: GKState
	unowned var entity: Squad
	var elapsedTime: NSTimeInterval = 0.0
	required init(entity: Squad)
	override func didEnterWithPreviousState(previousState: GKState?)
	override func updateWithDeltaTime(seconds: NSTimeInterval)
	override func isValidNextState(stateClass: AnyClass) -> Bool
Blocked.swift
	class BlockedState: GKState
	unowned var entity: CharacterEntity
	var elapsedTime: NSTimeInterval = 0.0
	required init(entity: CharacterEntity)
	override func didEnterWithPreviousState(previousState: GKState?)
	override func updateWithDeltaTime(seconds: NSTimeInterval)
	override func isValidNextState(stateClass: AnyClass) -> Bool
Physics.swift
	case Ground = 0, GroundLeader, Flying, Invisible, OnWall
	case Ground = 0, GroundLeader, Flying, Invisible, OnWall
	case Ground = 0, GroundLeader, Flying, Invisible, OnWall
	case Ground = 0, GroundLeader, Flying, Invisible, OnWall
	case Ground = 0, GroundLeader, Flying, Invisible, OnWall
	func contactWithEnvironmentEnded(node:SKNode)
	func contactWithUnitEnded(entity:CharacterEntity)
PhysicsHandler.swift
	protocol ContactNotifiableType
	func contactWithEntityDidBegin(entity: GKEntity)
	func contactWithEntityDidEnd(entity: GKEntity)
	func contactWithNodeDidBegin(node: SKNode)
	func contactWithNodeDidEnd(node: SKNode)
	enum ColliderType: UInt32
	case Attacker = 1
	case Defender = 2
	case AttackerProjectile = 4
	case DefenderProjectile = 8
	case Environment = 16
	case UI = 32
	case Invalid = 64
	class func didEndContact(contact: SKPhysicsContact)
ArmyDataAccessor.swift
	class ArmyDataAccessor
	init()
	class func getArmy() -> ArmyData?
	class func getArmyUnits() -> Array<SquadData>
	class func getSquadByName(name:String) -> (Int, SquadData)?
	class func addSquad(name:String, currentUnits:Int, maxUnits:Int, columns:Int)
	class func updateSquad(squad:SquadData)
	class func updateSquadAtIndex(index:Int, squad:SquadData)
	class func changeColumns(squadName:String, count:Int)
AI.swift
	let distanceByNodes : Float
	let distanceByAir : Float
	let lineOfSight : Bool = true
	var targets = Dictionary<Squad, AbilityRuleTargetData>()
	var target : Squad?
	var subject : Squad?
	var ability : Ability?
	case closeToTarget = "closeToTarget"
	case likelyToWin = "likelyToWin"
	case abilityIsValid = "abilityIsValid"
	override init()
	init(rules: [GKRule])
	override func updateWithDeltaTime(seconds: NSTimeInterval)
	func determineNextAction()
	func buildStateDictionary() -> AbilityRuleSnapshot?
	func enemyIsValid(enemy:Squad) -> Bool
	override func grade() -> Float
	init() { super.init(fact: AIComponenet.Fact.closeToTarget) }
	override func grade() -> Float
	init() { super.init(fact: AIComponenet.Fact.likelyToWin) }
	override func grade() -> Float
	init() { super.init(fact: AIComponenet.Fact.abilityIsValid) }
ZPosition.swift
	enum PositionCategory : Float
	case WorldMax = 5000, Environment, Flag, Display
	case WorldMax = 5000, Environment, Flag, Display
	case WorldMax = 5000, Environment, Flag, Display
	case WorldMax = 5000, Environment, Flag, Display
	class ZPosition
	class func getGroundZPosition() -> Float
	class func getUIPosition() -> Float
TrainScene.swift
	class TrainScene : GameScene
	override func clickedOrTapped(location:CGPoint)
	override class func loadSceneAssetsWithCompletionHandler(handler:()->())
MainMenu.swift
	class MainMenu : GameScene
	override func didMoveToView(view: SKView)
	func determineButtonAction(action:String)
	func advance()
	func moveAssetsOutOfView()
	override class func loadSceneAssetsWithCompletionHandler(handler:()->())
	override func willMoveFromView(view: SKView)
SpeakerBubble.swift
	class SpeakerBubble : SKCropNode
	var pictureToMask : SKSpriteNode
	init(width:CGFloat, scene:SKScene)
	required init?(coder aDecoder: NSCoder)
	func setInnerPosition(position:CGPoint)
Slide.swift
	protocol SlideMenu
	func show()
	func hide()
	class Slide : SKNode, SlideMenu
	var root : SKNode!
	var leftSide : Bool = true
	var appearSpeed : NSTimeInterval = 0.3
	init(sceneName:String, scene:GameScene, leftSide:Bool = true)
	required init?(coder aDecoder: NSCoder)
	func show()
	func hide()
	func initDecorations()
	override func touchesBegan(touches: Set<UITouch>, withEvent event: UIEvent?)
	override func touchesEnded(touches: Set<UITouch>, withEvent event: UIEvent?)
	override func touchesCancelled(touches: Set<UITouch>?, withEvent event: UIEvent?)
	func handleButtonPress(name:String, node:SKNode)
	func getStartingLeft(content:SKNode, scene:GameScene) -> CGPoint
	func getStartingRight(content:SKNode, scene:GameScene) -> CGPoint
	func getLeftPosition(content:SKNode) -> (pos:CGPoint, offset:CGFloat)
	func getRightPosition(content:SKNode) -> (pos:CGPoint, offset:CGFloat)
CacheService.swift
	class CacheService : NSCache
	static let sharedInstance = CacheService()
	override init()
	deinit
WaveFactory.swift
	class WaveFactory
	class func createWavesFromNSArray(data:NSArray) -> Array<Wave>?
	class func createSpawnsFromArray(data:Array<NSDictionary>) -> Array<Spawn>?
Render.swift
	var elapsedTime : NSTimeInterval = 0.0
Death.swift
	class DeathComponent : GKComponent
	var dying : Bool = false
	override init()
	func beginDeath()
	func notifyTargetsOfDeat()
SquadFactory.swift
	var squadIDCounter : Int = 0
	class SquadFactory
	static let sharedInstance = SquadFactory()
	var squads = [Squad]()
	func createSquad(unit:String, count: Int, position:CGPoint, scene:GameScene, enemy:Bool = false, heading:Float? = nil, columns:Int = 3, spacing:Int = 48, exp:Double = 0) -> Squad
	func handleWorldData(squad:Squad, data:NSMutableDictionary)
UINode.swift
	func showNavbar()
	func hideNavBar()
	func addDialogueCapabilities(scene:GameScene)
WorldMap.swift
	class WorldMap : GameScene
	var pins = Array<MapPin>()
	func setupWorldState()
	func markPreviousLevels()
	func loadMapAnimations()
	func loadWater(atlas:SKTextureAtlas)
	func loadWindmill(atlas:SKTextureAtlas)
	func loadSmoke(atlas:SKTextureAtlas)
	func toggleSmokeAnimation(smoke:AnimatedNode)
	override func clickedOrTapped(location:CGPoint)
	override class func loadSceneAssetsWithCompletionHandler(handler:()->())
SoundEffectsService.swift
	var MASTER_SOUND_VOLUME : Int = 8
	class SoundEffects
	var ui = Dictionary<String, SKAction>()
	var cache = Dictionary<String, SKAction>()
	var player : AVAudioPlayer?
	class var sharedInstance: SoundEffects
	init()
	func setup()
	func initUISounds()
	func getSoundVolume() -> Float
	func changeVolume(change:Int)
Attributes.swift
	case Base = "Base", WalkingSpeed = "WalkingSpeed", HitPoints = "HitPoints", Strength = "Strength"
	case Base = "Base", WalkingSpeed = "WalkingSpeed", HitPoints = "HitPoints", Strength = "Strength"
	case Base = "Base", WalkingSpeed = "WalkingSpeed", HitPoints = "HitPoints", Strength = "Strength"
	case Base = "Base", WalkingSpeed = "WalkingSpeed", HitPoints = "HitPoints", Strength = "Strength"
Defending.swift
	unowned var entity: Squad
	func shouldEngageTarget(target:Squad) -> Bool
Engaging.swift
	class EngagingState: GKState
	unowned var entity: Squad
	var elapsedTime: NSTimeInterval = 0.0
	required init(entity: Squad)
	override func didEnterWithPreviousState(previousState: GKState?)
	override func updateWithDeltaTime(seconds: NSTimeInterval)
	override func isValidNextState(stateClass: AnyClass) -> Bool
	override func willExitWithNextState(nextState: GKState)
HeroSelect.swift
	class HeroSelect : Slide
	init(scene:GameScene)
	required init?(coder aDecoder: NSCoder)
	func setDefaults()
	override func handleButtonPress(name: String, node: SKNode)
Queue.swift
	override func updateWithDeltaTime(seconds: NSTimeInterval)
LevelData.swift
	enum LevelType : Int
	case Battle = 1, Decision = 2
	case Battle = 1, Decision = 2
	class Level : NSObject, NSCoding
	var id : Int = 0
	var name : String = ""
	var iconPosition : CGPoint = CGPoint(x:1024, y:768)
	var footprintPosition : CGPoint = CGPoint(x:1024, y:768)
	var footprintFrames : Int = 0
	var type : LevelType = LevelType.Battle
	var dialogueCount : Int = 0
	var highScore : Double = 0
	var expReward : Float = 0
	var completed : Bool = false
	var revealed : Bool = false
	var cutscene : String = "Intro"
	init(id:Int, name: String, startScale:CGFloat, endScale:CGFloat, startPosition:CGPoint, endPosition:CGPoint, iconPosition:CGPoint, footprintPosition:CGPoint, footprintFrames:Int, type:LevelType, dialogueCount : Int, cutscene:String, exp:Float = 0)
	required init?(coder: NSCoder)
	func encodeWithCoder(coder: NSCoder)
	class LevelData : NSObject, NSCoding
	var levels = Array<Level>()
	override init()
	required init?(coder: NSCoder)
	func encodeWithCoder(coder: NSCoder)
	func populateDefaultLevelData()
	func setTestingData()
MoveAction.swift
	class MoveAction : Action
	var originalLocation : CGPoint = CGPoint.zero
	var recognizer : UIGestureRecognizer!
	override init(squad:Squad, ability:Ability, entity:ActionBar)
	override func updateWithDeltaTime(seconds: NSTimeInterval)
Heraldry.swift
	class HeraldryComponent : GKComponent, ButtonNodeResponder
	var root : ButtonNode?
	var maskedHealthBars = SKSpriteNode()
	var touchCallback : ()->() = { }
	let crestColors : Dictionary<String, UIColor> = [
	func removeHealth()
	func snapToLeadersPosition()
	func moveToDesiredPositionWithBounds(desired:CGPoint, scene:GameScene)
	func highlightCrest(color:String? = nil, pulse:Bool = false)
	func unhighlightCrest()
	func addTimerMask(duration:Double)
	func removeTimerMask(node:SKNode)
	override func updateWithDeltaTime(seconds: NSTimeInterval)
	func buttonTouchesBegan(touches: Set<UITouch>, withEvent event: UIEvent?)
	func buttonTouchesEnded(touches: Set<UITouch>, withEvent event: UIEvent?)
	func buttonTouchesCancelled(touches: Set<UITouch>?, withEvent event: UIEvent?)
MusicService.swift
	var MASTER_MUSIC_VOLUME : Int = 2
	class MusicService
	var player : AVAudioPlayer?
	var crossPlayer : AVAudioPlayer?
	class var sharedInstance: MusicService
	init()
	func playBackgroundMusic(filename: String)
	func prepareCrossFade(filename: String)
	func transitionsCrossToBackground()
	func fadeVolumeAndPause(player:AVAudioPlayer)
	func increaseVolume(player:AVAudioPlayer)
	func stopBackgroundMusic()
	func changeVolume(change:Int)
	func getSoundVolume() -> Float
Combat.swift
	class CombatComponent : GKComponent
	var beingAttackedBy = [CharacterEntity]()
	override init()
	func engage(target:CharacterEntity)
	func disengage()
	func engagementNotification(attacker:CharacterEntity)
	func disEngagementNotification(attacker:CharacterEntity)
	func pickBestTarget() -> CharacterEntity?
	func pickTargetFromSquad(enemy:Squad) -> CharacterEntity?
	func shouldEngageBasedOnTargetsAttacking(enemy:CharacterEntity) -> Bool
	func pickTargetToVolley(enemy:Squad) -> CharacterEntity?
Wheel.swift
	class WheelComponent : GKComponent
	init(radius:Float, reform:Float)
	func shouldReform(desired:CGPoint, variance:Float? = nil) -> (desiredAngle:Float, actualVariance:Float)?
PanGesture.swift
	class PanGesture : UIPanGestureRecognizer
	func handlePan(recognizer:UIPanGestureRecognizer, target:SKCameraNode)
	func handlePanChanged(recognizer:UIPanGestureRecognizer, target:SKCameraNode)
	func handlePanEnded(recognizer:UIPanGestureRecognizer, target:SKCameraNode)
DecisionChoice.swift
	class DecisionChoice : Slide
	init(scene:GameScene, subscene:String)
	required init?(coder aDecoder: NSCoder)
	func loadDecision()
	func loadTitle()
	func loadImage()
	func loadDescription()
	func loadChoice1(decision:Decision)
	func loadChoice2(decision:Decision)
	func saveChoice1()
	func saveChoice2()
	override func handleButtonPress(name: String, node: SKNode)
GameData.swift
	var saveFile : String = ""
	class GameData : NSObject, NSCoding
	override init()
	required init?(coder: NSCoder)
	func encodeWithCoder(coder: NSCoder)
	func save()
	class func getFilePath(name:String) -> String
	class func fileExistsAtPath(path:String, create:Bool = false) -> Bool
	class func deleteFileAtPath(path:String)
Projectile.swift
	class Projectile : SKSpriteNode
	var lift : CGFloat = 0.25
	var shadow : Bool = false
	var bounce : Int = -1
	var velocity : CGFloat = 600
	var offset : CGPoint = CGPoint(x:0, y:0)
	required init?(coder aDecoder: (NSCoder!))
	func fire(start:CGPoint, var end:CGPoint, data:NSMutableDictionary)
Animation.swift
	struct Animation
	var textures = Array<SKTexture>()
	var rightAnchor = CGPoint(x: 0, y: 0)
	var leftAnchor = CGPoint(x: 0, y: 0)
	var speed : NSTimeInterval = 0.1
	var shouldRepeat : Bool = true
	enum AnimationState : Int
	case Idle = 0, WalkFront, WalkBack, AttackFront, AttackBack, GetHit, Death
	case Idle = 0, WalkFront, WalkBack, AttackFront, AttackBack, GetHit, Death
	case Idle = 0, WalkFront, WalkBack, AttackFront, AttackBack, GetHit, Death
	case Idle = 0, WalkFront, WalkBack, AttackFront, AttackBack, GetHit, Death
	case Idle = 0, WalkFront, WalkBack, AttackFront, AttackBack, GetHit, Death
	case Idle = 0, WalkFront, WalkBack, AttackFront, AttackBack, GetHit, Death
	case Idle = 0, WalkFront, WalkBack, AttackFront, AttackBack, GetHit, Death
	var key : String
	class AnimaitonComponent : GKComponent
	var animations = Dictionary<AnimationState, Animation>()
	var requestedAnimation : AnimationState?
	var currentAnimation : AnimationState?
	override init()
	func resolveRequestedAnimation()
	override func updateWithDeltaTime(seconds: NSTimeInterval)
float2+Extensions.swift
	init(angle: Float)
Arrow.swift
	class Arrow : Projectile
	override func fire(start: CGPoint, var end: CGPoint, data: NSMutableDictionary)
SceneObject.swift
	enum SceneGroup : Int
	case Main = 0, World, Battle, Misc
	case Main = 0, World, Battle, Misc
	case Main = 0, World, Battle, Misc
	case Main = 0, World, Battle, Misc
	init(classType:GameScene.Type, name:String, transition:SKTransition? = nil, preloadable:Bool = false, category:SceneGroup = SceneGroup.World)
	var category : SceneGroup = SceneGroup.World
	let baseSceneTransition = SKTransition.fadeWithDuration(1)
Sound.swift
	class SoundComponent : GKComponent
	override init()
	func addSounds()
	func stopMarching()
Character.swift
	let identifier : String
	var agent : CharacterAgent
	var renderComponent : RenderComponent?
	var movementComponent : MovementComponent?
	var unitComponent : UnitComponent?
	var attributeComponent : AttributesComponent?
	var debug : Bool = false
	var isLeader: Bool = false
	func agentDidUpdate(_: GKAgent)
	func agentWillUpdate(agent: GKAgent)
	func contactWithEntityDidBegin(entity: GKEntity)
	func contactWithEntityDidEnd(entity: GKEntity)
	func contactWithNodeDidBegin(node: SKNode)
	func contactWithNodeDidEnd(node: SKNode)
LevelPreview.swift
	class LevelPreview : Slide
	var level : Level
	init(scene:GameScene, level:Level)
	required init?(coder aDecoder: NSCoder)
	override func hide()
	func loadGameTapped(file:String)
	func setLevelIcons()
	func playStory()
	func playBattle()
	override func handleButtonPress(name: String, node: SKNode)
Time.swift
	class Time
	class func delay(delay:Double, closure:()->())
MapPin.swift
	class MapPin : ButtonNode, ButtonNodeResponder
	var level : Level
	init(level:Level)
	required init?(coder aDecoder: NSCoder)
	func addAndAnimateDetails(level:Level)
	func addSword() -> SKSpriteNode
	func addAxe() -> SKSpriteNode
	func addExclamation() -> SKSpriteNode
	func highlight()
	func unhighlight()
	func buttonTouchesBegan(touches: Set<UITouch>, withEvent event: UIEvent?)
	func buttonTouchesEnded(touches: Set<UITouch>, withEvent event: UIEvent?)
	func buttonTouchesCancelled(touches: Set<UITouch>?, withEvent event: UIEvent?)
Navmesh.swift
	enum MeshSize : Float
	Individual = 32,
	Small = 80,
	Medium = 130,
	Large = 180,
	XLarge = 230
	static func getAppropriateSize(radius:Float) -> MeshSize
	var meshObstacles = [MeshObstacle]()
	var meshes = Dictionary<MeshSize, GKObstacleGraph>()
	func removeNodesThatArentConnected()
InstantAction.swift
	class InstantAction : Action
	override init(squad:Squad, ability:Ability, entity:ActionBar)
	override func updateWithDeltaTime(seconds: NSTimeInterval)
NavBar.swift
	class NavBar : ButtonNode, ButtonNodeResponder
	var root : SKNode?
	override init()
	func move(desired:CGPoint, duration:Double = 0.4)
	required init?(coder aDecoder: NSCoder)
	func buttonTouchesBegan(touches: Set<UITouch>, withEvent event: UIEvent?)
	func buttonTouchesEnded(touches: Set<UITouch>, withEvent event: UIEvent?)
	func buttonTouchesCancelled(touches: Set<UITouch>?, withEvent event: UIEvent?)
Dialogue.swift
	class Dialogue : SKLabelNode
	override init()
	init(text:String, alignment:SKLabelHorizontalAlignmentMode = SKLabelHorizontalAlignmentMode.Center, font:String = "Anivers-Regular")
	required init?(coder aDecoder: NSCoder)
	func createLabelWithText(text:String, alignment:SKLabelHorizontalAlignmentMode)
Camp.swift
	class Camp : LevelScene
	var selectedSquad : Squad?
	func loadArmy()
	func loadUnits(units:Array<SquadData>)
	func selectUnit(squad:Squad, name:String)
	func unselectUnit()
	override func clickedOrTapped(location:CGPoint)
	override class func loadSceneAssetsWithCompletionHandler(handler:()->())
GameViewController.swift
	class GameViewController: UIViewController, RPPreviewViewControllerDelegate
	var sceneManager : SceneManager?
	override func viewDidLoad()
	override func shouldAutorotate() -> Bool
	override func supportedInterfaceOrientations() -> UIInterfaceOrientationMask
	override func didReceiveMemoryWarning()
	override func prefersStatusBarHidden() -> Bool
	func startRecording()
	func stopRecording()
Attacking.swift
	unowned var entity: CharacterEntity
	var elapsedTime: NSTimeInterval = 0.0
	required init(entity: CharacterEntity)
	override func didEnterWithPreviousState(previousState: GKState?)
	override func updateWithDeltaTime(seconds: NSTimeInterval)
	override func isValidNextState(stateClass: AnyClass) -> Bool
	override func willExitWithNextState(nextState: GKState)
	func debugAttacking()
ArmyData.swift
	class SquadData : NSObject, NSCoding
	var name : String
	var currentUnits : Int
	var maxUnits : Int
	var columns : Int
	var exp : Double
	init(name:String, currentUnits:Int, maxUnits:Int, columns:Int, exp:Double = 0)
	required init?(coder: NSCoder)
	func encodeWithCoder(coder: NSCoder)
	class ArmyData : NSObject, NSCoding
	var squads = Array<SquadData>()
	override init()
	required init?(coder: NSCoder)
	func encodeWithCoder(coder: NSCoder)
LevelScene.swift
	class LevelScene : GameScene, SKPhysicsContactDelegate
	var lastUpdateTimeInterval: NSTimeInterval = 0
	let maximumUpdateDeltaTime: NSTimeInterval = 1.0 / 60.0
	var entities = Array<GKEntity>()
	var navmesh : Navmesh?
	var level : Level?
	lazy var componentSystems: [GKComponentSystem] =
	func loadInitialTroops()
	func beginBattle()
	func beginWaves()
	func waveStarting()
	func loadWaveDataForLevel(name:String) -> Array<Wave>?
	func didBeginContact(contact: SKPhysicsContact)
	func didEndContact(contact: SKPhysicsContact)
	override func clickedOrTapped(location:CGPoint)
	func getDeathNotification(entity:Squad)
	func showBattleReport(victory:Bool)
	func finishLevel()
	func markLevelAsCompleted(id:Int)
CustomAction.swift
	class CustomAction : CSAction
	var action : ((callback:()->())->())?
	required init?(coder aDecoder: NSCoder)
	init(object:SKNode)
	func setCustomAction(action:((callback:()->())->()))
	override func process(callback:()->())
Volleying.swift
	unowned var entity: CharacterEntity
	var elapsedTime: NSTimeInterval = 0.0
	required init(entity: CharacterEntity)
	override func didEnterWithPreviousState(previousState: GKState?)
	override func updateWithDeltaTime(seconds: NSTimeInterval)
	override func isValidNextState(stateClass: AnyClass) -> Bool
	override func willExitWithNextState(nextState: GKState)
	func inDesiredPosition() -> Bool
	func moveTowardsDesiredPosition(desired:CGPoint)
	func debugVolleying()
Casualty.swift
	class CasualtyComponenet : GKComponent
	var dying : Bool = false
	override init()
	func handleUnitDeath(unit:CharacterEntity)
	func beginDeath()
Sleeping.swift
	class SleepingState : GKState
	unowned var entity: Squad
	var elapsedTime: NSTimeInterval = 0.0
	required init(entity: Squad)
	override func didEnterWithPreviousState(previousState: GKState?)
	override func updateWithDeltaTime(seconds: NSTimeInterval)
	override func isValidNextState(stateClass: AnyClass) -> Bool
Unit.swift
	class UnitComponent : GKComponent
	var squad : Squad?
	var orderedPosition : CGPoint?
	override init()
Actions.swift
	var actions = [Action]()
	override init()
	func removeActions()
	func getActionByName(name:String) -> Action?
	func getPendingSquadAction() -> Action?
	override func updateWithDeltaTime(seconds: NSTimeInterval)
Fleeing.swift
	class FleeingState: GKState
	unowned var entity: Squad
	var elapsedTime: NSTimeInterval = 0.0
	required init(entity: Squad)
Cutscene.swift
	class Cutscene : GameScene
	var sceneName : String?
	let nextScene : Dictionary<String, String> = [
	override func didMoveToView(view: SKView)
	func createAVVideoPlayer(name:String) -> AVPlayer
	func playerDidFinishPlaying(note: NSNotification?)
	override func clickedOrTapped(location:CGPoint)
Following.swift
	static let ArrivalDistance : CGFloat = 10 // 10 squared
	static let StuckInContact : CGFloat = 150 // 150 squared
	static let Lost : CGFloat = 400 // 400 squared
	class FollowingState: GKState
	unowned var entity: CharacterEntity
	var elapsedTime: NSTimeInterval = 0.0
	required init(entity: CharacterEntity)
	override func didEnterWithPreviousState(previousState: GKState?)
	override func updateWithDeltaTime(seconds: NSTimeInterval)
	func moveTowardsDesiredPosition(desired:CGPoint)
	override func willExitWithNextState(nextState: GKState)
	override func isValidNextState(stateClass: AnyClass) -> Bool
Easing.swift
	let M_PI_2_f = Float(M_PI_2)
	let M_PI_f = Float(M_PI)
	func dub(num:Float)->Float
	func sinFloat(num:Float)->Float
	func LinearInterpolation(p:Float)->Float
	func  QuadraticEaseIn(p:Float)->Float
	func QuadraticEaseOut(p:Float)->Float
	func QuadraticEaseInOut(p:Float)->Float
	func CubicEaseIn(p:Float)->Float
	func CubicEaseOut(p:Float)->Float
	func CubicEaseInOut(p:Float)->Float
	func QuarticEaseIn(p:Float)->Float
	func QuarticEaseOut(p:Float)->Float
	func QuarticEaseInOut(p:Float)->Float
	func QuinticEaseIn(p:Float)->Float
	func QuinticEaseOut(p:Float)->Float
	func QuinticEaseInOut(p:Float)->Float
	func SineEaseIn(p:Float)->Float
	func SineEaseOut(p:Float)->Float
	func SineEaseInOut(p:Float)->Float
	func CircularEaseIn(p:Float)->Float
	func CircularEaseOut(p:Float)->Float
	func CircularEaseInOut(p:Float)->Float
	func ExponentialEaseIn(p:Float)->Float
	func ExponentialEaseOut(p:Float)->Float
	func ExponentialEaseInOut(p:Float)->Float
	func ElasticEaseIn(p:Float)->Float
	func ElasticEaseOut(p:Float)->Float
	func ElasticEaseInOut(p:Float)->Float
	func BackEaseIn(p:Float)->Float
	func BackEaseOut(p:Float)->Float
	func BackEaseInOut(p:Float)->Float
	func BounceEaseIn(p:Float)->Float
	func BounceEaseOut(p:Float)->Float
	func BounceEaseInOut(p:Float)->Float
Thinking.swift
	class ThinkingState: GKState
	unowned var entity: Squad
	var elapsedTime: NSTimeInterval = 0.0
	required init(entity: Squad)
	override func didEnterWithPreviousState(previousState: GKState?)
	override func updateWithDeltaTime(seconds: NSTimeInterval)
	override func isValidNextState(stateClass: AnyClass) -> Bool
	func handleCommand(nextCommand:Command)
CharacterFactory.swift
	class CharacterFactory
	static let sharedInstance = CharacterFactory()
	func createCharacter(name:String, leader:Bool = false) -> CharacterEntity?
	func loadPListData(name:String) -> NSDictionary
	func configureCombat(var character:CharacterEntity,  data:NSDictionary, name:String) -> CharacterEntity
	func loadGeneralCombatData(character:CharacterEntity, data:NSDictionary) -> CharacterEntity
	func loadAllAnimations(character:CharacterEntity,  data:NSDictionary, name:String) -> CharacterEntity
	func loadAnimation(animationName:String, name:String, data:NSDictionary, shouldRepeat:Bool) -> Animation
Heroes.swift
	class Heroes : GameScene
	func setDefaultSelection()
	override func clickedOrTapped(location:CGPoint)
	override class func loadSceneAssetsWithCompletionHandler(handler:()->())
Intelligence.swift
	let stateMachine: GKStateMachine
	let initialStateClass: AnyClass
	var currentState : GKState?
	init(states: [GKState])
	override func updateWithDeltaTime(seconds: NSTimeInterval)
	func enterInitialState()
	func debugState()
AttackAction.swift
	class AttackAction : Action
	override init(squad:Squad, ability:Ability, entity:ActionBar)
	func processAttackCommand(enemy:Squad)
	override func updateWithDeltaTime(seconds: NSTimeInterval)
	func highlightAttackableEnemies()
	func unhighlightAttackableEnemies()
Graphics.swift
	enum UIUserInterfaceIdiom : Int
	case Unspecified
	case Phone // iPhone and iPod touch style UI
	case Pad // iPad style UI
	class Graphics
	class func imageFadeOutAndRemove(img:SKNode, duration:NSTimeInterval)
	class func pulseBlendFactor(min:CGFloat, max:CGFloat, maxDelay:CGFloat, node:SKSpriteNode)
	class func pulseAlpha(min:CGFloat, max:CGFloat, maxDelay:CGFloat, node:SKNode)
	class func pulseScale(min:CGFloat, max:CGFloat, maxDelay:CGFloat, node:SKNode)
	class func pulseScale(min:CGFloat, max:CGFloat, delay:CGFloat, node:SKNode)
	class func loadFramesFromAtlas(atlasNamed:String, baseFileName:String, numberOfFrames:Int) -> Array<SKTexture>
	class func loadFramesFromAtlas(atlas:SKTextureAtlas, baseFileName:String, numberOfFrames:Int) -> Array<SKTexture>
	class func getRightBound(sceneWidth:CGFloat = 2730) -> CGFloat
CharacterGoals.swift
	class CharacterGoals
	class func toStayInFormation(entity:CharacterEntity)
	class func toAvoidSquadLeaders(entity:CharacterEntity)
	class func toWander(entity:CharacterEntity, strength:Float = 200)
CharacterAgent.swift
	class CharacterAgent : GKAgent2D
	var actualPosition = CGPoint(x:0, y:0)
	var actualHeading : Float = 0
	override init()
	func setHeading(rotation:Float)
	func setPos(position:CGPoint)
	func setWalkingSpeed()
Engaged.swift
	class EngagedState: GKState
	unowned var entity: Squad
	var elapsedTime: NSTimeInterval = 0.0
	var heading : Float = 0.0
	var initialPos : CGPoint?
	required init(entity: Squad)
	override func didEnterWithPreviousState(previousState: GKState?)
	override func updateWithDeltaTime(seconds: NSTimeInterval)
	override func isValidNextState(stateClass: AnyClass) -> Bool
	override func willExitWithNextState(nextState: GKState)
	func checkForFleeing()
	func debugAttacking()
Wandering.swift
	unowned var entity: CharacterEntity
	var elapsedTime: NSTimeInterval = 0.0
	required init(entity: CharacterEntity)
	override func didEnterWithPreviousState(previousState: GKState?)
	override func updateWithDeltaTime(seconds: NSTimeInterval)
	func moveTowardsDesiredPosition(desired:CGPoint)
	override func willExitWithNextState(nextState: GKState)
CGRect+Extensions.swift
	case Left = 1, Top = 2, Right = 3, Bottom = 4
	case Left = 1, Top = 2, Right = 3, Bottom = 4
	case Left = 1, Top = 2, Right = 3, Bottom = 4
	case Left = 1, Top = 2, Right = 3, Bottom = 4
Squad.swift
	class Squad : GKEntity
	init(id:String, columns:Int, maxUnits:Int, spacing:Int = 48)
	func getLeader() -> CharacterEntity?
	func getAgentsToAvoid(exclude:CharacterEntity? = nil) -> [GKAgent]
	func getAgents(exclude:CharacterEntity? = nil) -> [GKAgent]
	func == (lh: Squad, rh: Squad) -> Bool
Attack.swift
	var attackRequested : Bool = false
	var currentAttack : Ability?
	override init()
	override func updateWithDeltaTime(seconds: NSTimeInterval)
	func animationHasBegun(character:CharacterEntity)
	func shootProjectile(unit:CharacterEntity, target:CharacterEntity, ability:Ability)
Movement.swift
	enum MovementType : Int
	case Towards = 0, Teleport, Path
	case Towards = 0, Teleport, Path
	case Towards = 0, Teleport, Path
	struct MoveInstructions
	let targetPosition : CGPoint?
	let targetPath : GKPath?
	let type : MovementType
	var callback : ()->() = {}
	var trackingAgent : GKAgent2D?
	var behaviors = [GKBehavior]()
	init(position:CGPoint? = nil, path:GKPath? = nil, trackingAgent:GKAgent2D? = nil, type:MovementType)
	class MovementComponent : GKComponent
	var nextMove : MoveInstructions?
	override init()
	override func updateWithDeltaTime(seconds: NSTimeInterval)
	func cancelExistingMove()
	func moveTowardsPoint(move:MoveInstructions)
	func updateTrackingAgent(desired:CGPoint)
	func followPath(move:MoveInstructions)
	func moveTowardsAgent(move:MoveInstructions, agentsToAvoid:[GKAgent], agentsToSeparate:[GKAgent])
Formation.swift
	class FormationComponent : GKComponent
	init(columns:Int, maxUnits:Int, spacing:Int)
	func getVectorAtPosition(position:Int) -> float2
	func buildPositions(maxUnits:Int, spacing:Int)
	func addRow(depthX:Int, leftSpots:Int, rightSpots:Int, spacing:Int)
ExperienceReport.swift
	required init?(coder aDecoder: NSCoder)
	func calculateExpToReward(expForLevel:Double, totalActionPoints:Double, unitActionPoints:Double) -> Double
Modifiers.swift
	override init()
UnitDesc.swift
	class UnitDesc : Slide
	let squad : Squad
	let unitName : String
	init(scene:GameScene, unitName: String, squad:Squad)
	required init?(coder aDecoder: NSCoder)
	func setGeneral()
	func setColumns()
	override func handleButtonPress(name: String, node: SKNode)
SceneManager.swift
	class SceneManager : GameSceneDelegate
	let view : SKView
	let loadingScene : SKScene
	var currentScene : SceneObject?
	init(view:SKView)
	func presentScene(scene:SKScene, sceneObj:SceneObject?)
	func sceneDidFinish(nextScene:SceneObject)
	func clearSceneCacheIfNecessary(sceneObj:SceneObject) -> Bool
	func preloadRelatedScenesInBackground(sceneObj:SceneObject)
DebugFlags.swift
	enum Debug : Int
	case PathFinding = 0, State, Layers, Time, Heraldry, SquadPositions, AnchorPoints, Navigation, MeshObstacles, ConnectedNodes, CombatPositions, SquadState
	case PathFinding = 0, State, Layers, Time, Heraldry, SquadPositions, AnchorPoints, Navigation, MeshObstacles, ConnectedNodes, CombatPositions, SquadState
	case PathFinding = 0, State, Layers, Time, Heraldry, SquadPositions, AnchorPoints, Navigation, MeshObstacles, ConnectedNodes, CombatPositions, SquadState
	case PathFinding = 0, State, Layers, Time, Heraldry, SquadPositions, AnchorPoints, Navigation, MeshObstacles, ConnectedNodes, CombatPositions, SquadState
	case PathFinding = 0, State, Layers, Time, Heraldry, SquadPositions, AnchorPoints, Navigation, MeshObstacles, ConnectedNodes, CombatPositions, SquadState
	case PathFinding = 0, State, Layers, Time, Heraldry, SquadPositions, AnchorPoints, Navigation, MeshObstacles, ConnectedNodes, CombatPositions, SquadState
	case PathFinding = 0, State, Layers, Time, Heraldry, SquadPositions, AnchorPoints, Navigation, MeshObstacles, ConnectedNodes, CombatPositions, SquadState
	case PathFinding = 0, State, Layers, Time, Heraldry, SquadPositions, AnchorPoints, Navigation, MeshObstacles, ConnectedNodes, CombatPositions, SquadState
	case PathFinding = 0, State, Layers, Time, Heraldry, SquadPositions, AnchorPoints, Navigation, MeshObstacles, ConnectedNodes, CombatPositions, SquadState
	case PathFinding = 0, State, Layers, Time, Heraldry, SquadPositions, AnchorPoints, Navigation, MeshObstacles, ConnectedNodes, CombatPositions, SquadState
	case PathFinding = 0, State, Layers, Time, Heraldry, SquadPositions, AnchorPoints, Navigation, MeshObstacles, ConnectedNodes, CombatPositions, SquadState
	case PathFinding = 0, State, Layers, Time, Heraldry, SquadPositions, AnchorPoints, Navigation, MeshObstacles, ConnectedNodes, CombatPositions, SquadState
	var enabled : Bool
	class DebugOverlay
	class func drawPoints(points:Array<CGPoint>, scene:LevelScene)
Reforming.swift
	class ReformingState: GKState
	unowned var entity: Squad
	var elapsedTime: NSTimeInterval = 0.0
	required init(entity: Squad)
	override func didEnterWithPreviousState(previousState: GKState?)
	override func updateWithDeltaTime(seconds: NSTimeInterval)
	func getDesiredPosition(leader:CharacterEntity) -> CGPoint?
	func moveTowardsDesiredPosition(leader:CharacterEntity, desired:CGPoint)
	override func isValidNextState(stateClass: AnyClass) -> Bool
	override func willExitWithNextState(nextState: GKState)
	class func reorderUnitsTowardsNewPosition(units:Array<CharacterEntity>, positions:Array<CGPoint>) -> Array<CharacterEntity>
Targeting.swift
	class TargetingState: GKState
	unowned var entity: Squad
	var elapsedTime: NSTimeInterval = 0.0
	required init(entity: Squad)
	override func didEnterWithPreviousState(previousState: GKState?)
	override func updateWithDeltaTime(seconds: NSTimeInterval)
	override func isValidNextState(stateClass: AnyClass) -> Bool
	func debugTargeting()
DialogueAction.swift
	class DialogueAction : CSAction
	var label : Dialogue
	var fadeUp : Bool = false
	var duration : Double = 2
	required init?(coder aDecoder: NSCoder)
	init(text:String, position:CGPoint, fadeUp:Bool = false, duration:Double = 2)
	override func process(callback:()->())
	func slideIn(duration:Double = 2, offset:CGFloat, callback:()->())
Dying.swift
	unowned var entity: CharacterEntity
	var elapsedTime: NSTimeInterval = 0.0
	required init(entity: CharacterEntity)
	override func didEnterWithPreviousState(previousState: GKState?)
	override func updateWithDeltaTime(seconds: NSTimeInterval)
	override func isValidNextState(stateClass: AnyClass) -> Bool
ButtonNode.swift
	func buttonTouchesBegan(touches: Set<UITouch>, withEvent event: UIEvent?)
	func buttonTouchesEnded(touches: Set<UITouch>, withEvent event: UIEvent?)
	func buttonTouchesCancelled(touches: Set<UITouch>?, withEvent event: UIEvent?)
	class ButtonNode : SKNode
	var responder : ButtonNodeResponder?
	init(responder:ButtonNodeResponder)
	override init()
	func setResponder(responder:ButtonNodeResponder)
	required init?(coder aDecoder: NSCoder)
	override func touchesEnded(touches: Set<UITouch>, withEvent event: UIEvent?)
	override func touchesCancelled(touches: Set<UITouch>?, withEvent event: UIEvent?)
FuzzyRule.swift
	class FuzzyRule: GKRule
	var snapshot: AbilityRuleSnapshot!
	func grade() -> Float { return 0.0 }
	let fact: AIComponenet.Fact
	init(fact: AIComponenet.Fact)
	override func evaluatePredicateWithSystem(system: GKRuleSystem) -> Bool
	override func performActionWithSystem(system: GKRuleSystem)
CommandFactory.swift
	func validateMelee(squad:Squad, ability:Ability, instructions:CommandInstructions) -> Bool
	func validateRanged(squad:Squad, ability:Ability, instructions:CommandInstructions) -> Bool
ScreenRecording.swift
	var RECORDING : Bool = false
	var screenRecordingToggleEnabled: Bool
	func startScreenRecording()
	func stopScreenRecordingWithHandler(handler:(() -> Void))
	func showScreenRecordingAlert(message: String)
	func discardRecording()
	func screenRecorder(screenRecorder: RPScreenRecorder, didStopRecordingWithError error: NSError, previewViewController: RPPreviewViewController?)
	func previewControllerDidFinish(previewController: RPPreviewViewController)
Forest.swift
	class Forest : LevelScene
	override func didMoveToView(view: SKView)
	func markAsRevealed()
	func loadWaves()
	override func clickedOrTapped(location: CGPoint)
	override class func loadSceneAssetsWithCompletionHandler(handler:()->())
	func configureNavmesh()
	override func beginBattle()
	override func finishLevel()
Settings.swift
	class SettingsButton : ButtonNode, ButtonNodeResponder
	override init()
	required init?(coder aDecoder: NSCoder)
	func buttonTouchesBegan(touches: Set<UITouch>, withEvent event: UIEvent?)
	func buttonTouchesEnded(touches: Set<UITouch>, withEvent event: UIEvent?)
	func buttonTouchesCancelled(touches: Set<UITouch>?, withEvent event: UIEvent?)
	class Settings : Slide
	init(scene:GameScene)
	required init?(coder aDecoder: NSCoder)
	override func hide()
	func resumeButtonTapped()
	func quitButtonTapped()
	func soundDownButtonTapped()
	func soundUpButtonTapped()
	func updateSoundLabel()
	func musicDownButtonTapped()
	func musicUpButtonTapped()
	func updateMusicLabel()
	func recordButtonTapped()
	func updateRecordLabel()
	override func handleButtonPress(name: String, node: SKNode)
Shooting.swift
	class ShootingState: GKState
	unowned var entity: Squad
	var elapsedTime: NSTimeInterval = 0.0
	var heading : Float = 0.0
	var initialPos : CGPoint?
	required init(entity: Squad)
	override func didEnterWithPreviousState(previousState: GKState?)
	override func updateWithDeltaTime(seconds: NSTimeInterval)
	override func isValidNextState(stateClass: AnyClass) -> Bool
	override func willExitWithNextState(nextState: GKState)
	func debugShooting()
RevealService.swift
	class RevealService
	class func revealNextLevel(camera:SKCameraNode, map:SKNode, level:Level, scene:GameScene, callback:()->())
	class func addFootprintsMask(map:SKNode, level:Level)
	class func addTravelDialogue(map:SKNode, level:Level, cutscene:DialogueSequence, scene:GameScene)
	class func determineTravelDuration(level:Level) -> Double
	class func determineAnimationSpeedForFootsteps(level:Level) -> NSTimeInterval
ASAttributedLabelNode.swift
	class ASAttributedLabelNode: SKSpriteNode
	required init?(coder aDecoder: NSCoder) { super.init(coder: aDecoder) }
	init(size: CGSize)
	var attributedString: NSAttributedString!
	func draw()
	func buildText(myString:String, mySize: CGFloat, myFont:String, alignment:NSTextAlignment = NSTextAlignment.Left) -> (NSMutableAttributedString)
CSAction.swift
	weak var object : SKNode?
	var delay : Double = 0
	var finishEarly : Bool = false
	required init?(coder aDecoder: NSCoder)
	override init()
	func process(callback:()->())
	func finish()
	func timingFunc(time:Float) -> Float
	func setTimingFunctionsForActions(var actions:Array<SKAction>) -> Array<SKAction>
Speakers.swift
	struct Speaker
	var node : SKSpriteNode?
	var endPosition : CGPoint?
	var startPosition : CGPoint?
	var cropNode : SpeakerBubble?
	class SpeakerBox : SKNode
	var speakers = Array<Speaker>()
	let speakerHeight : CGFloat = 193
	let bgHeight : CGFloat = 115
	let bubbleHeight : CGFloat = 135
	var box : SKShapeNode?
	var topBox : SKShapeNode?
	override init()
	required init?(coder aDecoder: NSCoder)
	func addBackground()
	func addSpeaker(name:String)
	func setPositionsForSpeakers(first:Bool = true)
	func getSpeakerPosition(speaker:Speaker, index:CGFloat, speakerCount:CGFloat) -> (startPos:CGPoint, endPos:CGPoint)
	func getBubblePosition(speaker:Speaker, index:CGFloat, speakerCount:CGFloat) -> (startPos:CGPoint, width:CGFloat)
	func animateIntoView()
	func appearIntoView()
	func animateOutOfView()
	func removeSpeaker(index:Int)
CGPath+Extensions.swift
	class func lineToPoint(start:CGPoint, end:CGPoint) -> CGMutablePathRef
	class func arcToPoint(start:CGPoint, end:CGPoint, next:CGPoint?) -> CGMutablePathRef
	class func evenCurveToPoint(start:CGPoint, end:CGPoint, lift:CGFloat) -> CGMutablePathRef
	class func pathFromPoints(points:[CGPoint]) -> CGPath
AnimatedNode.swift
	struct AnimationCache
	var textures = Array<SKTexture>()
	var rightAnchor = CGPoint(x: 0, y: 0)
	var leftAnchor = CGPoint(x: 0, y: 0)
	var speed : CGFloat = 0.1
	class AnimatedNode : SKSpriteNode
	required init(coder: NSCoder)
	init(imageName:String)
	init(nodeTexture:SKTexture)
	func resolveRequestAnimation(loop:Bool)
	func setAnchorPoint()
	func setDirectionToFace(start:CGPoint, end:CGPoint)
	func fireAnimationForState(frames:Array<SKTexture>, key:String)
	func loopAnimationForState(frames:Array<SKTexture>, key:String)
AppDelegate.swift
	class AppDelegate: UIResponder, UIApplicationDelegate
	var window: UIWindow?
	func application(application: UIApplication, didFinishLaunchingWithOptions launchOptions: [NSObject: AnyObject]?) -> Bool
	func applicationWillResignActive(application: UIApplication)
	func applicationDidEnterBackground(application: UIApplication)
	func applicationWillEnterForeground(application: UIApplication)
	func applicationDidBecomeActive(application: UIApplication)
	func applicationWillTerminate(application: UIApplication)
RangedAttack.swift
	class ShootAction : Action
	override init(squad:Squad, ability:Ability, entity:ActionBar)
	func processAttackCommand(enemy:Squad)
	override func updateWithDeltaTime(seconds: NSTimeInterval)
	func showRange()
	func highlightAttackableEnemies()
	func unhighlightAttackableEnemies()
	func targetIsValid(enemy:Squad) -> Bool
CatchingUp.swift
	class CatchingUpState: GKState
	unowned var entity: CharacterEntity
	var elapsedTime: NSTimeInterval = 0.0
	required init(entity: CharacterEntity)
	override func didEnterWithPreviousState(previousState: GKState?)
	override func updateWithDeltaTime(seconds: NSTimeInterval)
	func moveTowardsDesiredPosition(desired:CGPoint)
	override func isValidNextState(stateClass: AnyClass) -> Bool
WaveService.swift
	struct Spawn
	var enemy : String = ""
	var amount : Int = 0
	var spacing : Int = 0
	var columns : Int = 0
	var waitTime : Double = 0
	var path : Int = 0// path must be an object that contains point to spawn at and startng heading
	struct SpawnPoint
	var point : CGPoint = CGPoint(x:0, y:0)
	var heading: CGFloat = 0
	struct Wave
	var waitTime : Double = 0
	var delayTime : Double = 0
	var spawns = Array<Spawn>()
	class WaveService
	init(scene:LevelScene, waves:Array<Wave>, spawnPoints:Array<SpawnPoint>)
	func beginWaves()
	func spawnCurrentWave()
	func isLastWave() -> Bool
Hills.swift
	class Hills : LevelScene
	override func didMoveToView(view: SKView)
	func loadWaves()
	override func clickedOrTapped(location: CGPoint)
	override class func loadSceneAssetsWithCompletionHandler(handler:()->())
	func configureNavmesh()
	override func beginBattle()
	override func finishLevel()
Ability.swift
	case Move = "Move", Melee = "Melee", Ranged = "Ranged", Instant = "Instant", Spell = "Spell"
	case Move = "Move", Melee = "Melee", Ranged = "Ranged", Instant = "Instant", Spell = "Spell"
	case Move = "Move", Melee = "Melee", Ranged = "Ranged", Instant = "Instant", Spell = "Spell"
	case Move = "Move", Melee = "Melee", Ranged = "Ranged", Instant = "Instant", Spell = "Spell"
	case Move = "Move", Melee = "Melee", Ranged = "Ranged", Instant = "Instant", Spell = "Spell"
	case Moving = "Moving", NotMoving = "NotMoving", InCombat = "InCombat", NotInCombat = "NotInCombat"
	case Moving = "Moving", NotMoving = "NotMoving", InCombat = "InCombat", NotInCombat = "NotInCombat"
	case Moving = "Moving", NotMoving = "NotMoving", InCombat = "InCombat", NotInCombat = "NotInCombat"
	case Moving = "Moving", NotMoving = "NotMoving", InCombat = "InCombat", NotInCombat = "NotInCombat"
ActionSequence.swift
	var actions = Array<CSAction>()
	var actionIndex : Int = 0
	var callbackIndex : Int = 0
	weak var scene : GameScene?
	var running : Bool = true
	init(scene:GameScene?)
	func run(callback:()->())
	func skip()
	func finish()
	func delay(delay:Double, closure:()->())
